name: CICD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '18 7 * * 3'   # Bearer
    - cron: '19 15 * * 1'  # CodeQL
    - cron: '32 17 * * 2'  # OSV

permissions:
  contents: read
  security-events: write
  actions: read
  packages: read

jobs:

  bearer-scan:
    name: Bearer Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run Report
        id: report
        uses: bearer/bearer-action@828eeb928ce2f4a7ca5ed57fb8b59508cb8c79bc
        with:
          api-key: ${{ secrets.BEARER_TOKEN }}
          format: sarif
          output: results.sarif
          exit-code: 0

      - name: Validate SARIF file
        run: |
          if jq '.runs[0].results == null' results.sarif; then
            echo "No results found, initializing results array."
            jq '.runs[0].results = []' results.sarif > temp.sarif && mv temp.sarif results.sarif
          fi
        continue-on-error: true

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif

  codeql-scan:
    name: CodeQL Scan (${{ matrix.language }})
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - language: actions
            build-mode: none
          - language: java-kotlin
            build-mode: none
    outputs:
      job-status: ${{ steps.analyze.outcome }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          build-mode: ${{ matrix.build-mode }}

      - if: matrix.build-mode == 'manual'
        shell: bash
        run: |
          echo 'Manual build placeholder'
          exit 1

      - name: Perform CodeQL Analysis
        id: analyze
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  osv-scan:
    name: OSV-Scanner
    uses: google/osv-scanner-action/.github/workflows/osv-scanner-reusable.yml@1f1242919d8a60496dd1874b24b62b2370ed4c78
    if: github.event_name == 'pull_request' || github.event_name == 'merge_group' || github.event_name == 'schedule' || github.event_name == 'push'
    continue-on-error: true
    with:
      scan-args: |
        -r
        --skip-git
        ./
    secrets: inherit

  osv-scan-pr:
    name: OSV-Scanner PR Check
    uses: google/osv-scanner-action/.github/workflows/osv-scanner-reusable-pr.yml@1f1242919d8a60496dd1874b24b62b2370ed4c78
    if: github.event_name == 'pull_request' || github.event_name == 'merge_group'
    with:
      scan-args: |
        -r
        --skip-git
        ./
    secrets: inherit

  java-tests:
    name: Run JUnit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build and run tests
        run: mvn clean verify

      - name: Upload test report (optional)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: junit-test-results
          path: target/surefire-reports

  notify-osv-failure:
    name: Notify on OSV Scan Failure (GitHub PR Comment)
    runs-on: ubuntu-latest
    needs: osv-scan
    if: needs.osv-scan.result == 'failure' && github.event_name == 'pull_request'
    steps:
      - name: Post comment on PR about OSV scan failure
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ⚠️ **OSV Scanner found vulnerabilities or errors.**
            Please review the OSV scan results and take action.

  build-and-push:
    name: Docker Image CI
    runs-on: ubuntu-latest
    needs: [java-tests, bearer-scan, codeql-scan]
    if: ${{ success() }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          IMAGE_NAME=${{ secrets.DOCKER_USERNAME }}/clickgameapi
          TAG=latest
          docker build -t $IMAGE_NAME:$TAG .
          docker push $IMAGE_NAME:$TAG
